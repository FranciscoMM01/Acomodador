import tensorflow as tf
import numpy as np 
import matplotlib.pyplot as plt

# Creacion de array de entrada y de salida, sirven de ejemplo para que aprenda la red
celsius = np.array([-40,-10,0,8,15,22,38], dtype=float)
fahrenheit = np.array([-40,14,32,46,59,72,100], dtype=float)


capa = tf.keras.layers.Dense(units = 1, input_shape = [1])
modelo = tf.keras.Sequential([capa])

modelo.compile(
    optimizer = tf.keras.optimizers.Adam(0.1), #variable para ajustar pesos y sesgos
    loss='mean_squared_error'
)

print("Comenzando entrenamiento...")
historial = modelo.fit(celsius, fahrenheit, epochs = 1000, verbose = False) #? fit(entrada, esperados, cantidad de vueltas) 
                                                                            #? verbose para presentar los datos de entrenamiento
print("Modelo entrenado!")

#* Para generar la grafica de perdidas/aprendizaje
plt.xlabel("# Epoca")
plt.ylabel("Magnitud de pérdidas")
plt.plot(historial.history["loss"])
plt.show()

print("Muestra de la predicción")
resultado = modelo.predict([100])
print("El resultado es "+ str(resultado) + " fahrenheit")

# Muestra el peso y sesgo
print("Variables entrenadas")
print(capa.get_weights())
